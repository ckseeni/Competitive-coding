/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<Integer> arr = new ArrayList<Integer>();
    public void traversal(TreeNode root){
        if(root!=null){
            arr.add(root.val);  
            if(root.left!=null)
                traversal(root.left);
            if(root.right!=null)
                traversal(root.right);
        }
    }
    
    public int getMinimumDifference(TreeNode root) {
        traversal(root);
        Collections.sort(arr);
        int d[] = new int[arr.size()-1];
        for(int i=0;i<arr.size()-1;i++)
            d[i] = arr.get(i+1) - arr.get(i);
        Arrays.sort(d);
        return d[0];
    }
}
Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.

Example:

Input:

   1
    \
     3
    /
   2

Output:
1

Explanation:
The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).

Note: There are at least two nodes in this BST. 
