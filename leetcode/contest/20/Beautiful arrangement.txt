public class Solution {
    public int countArrangement(int N) {
        int arr[] = new int[N];
        for(int i=0;i<N;i++)
            arr[i] = i+1;
        return count(N,arr);
    }
    public int count(int n,int arr[]){
        if(n<=0)
            return 1;
        int ans = 0;
        for(int i=0;i<n;i++){
            if(arr[i]%n==0||n%arr[i]==0){
                int t = arr[i];
                arr[i] = arr[n-1];
                arr[n-1] = t;
                ans = ans + count(n-1,arr);
                t = arr[i];
                arr[i] = arr[n-1];
                arr[n-1] = t;
            }
        }
        return ans;
    }
}
526. Beautiful Arrangement

    User Accepted: 423
    User Tried: 678
    Total Accepted: 428
    Total Submissions: 1467
    Difficulty: Medium

Suppose you have N integers from 1 to N. We define a beautiful arrangement as an array that is constructed by these N numbers successfully if one of the following is true for the ith position (1 = i = N) in this array:

    The number at the ith position is divisible by i.
    i is divisible by the number at the ith position.

Now given N, how many beautiful arrangements can you construct?

Example 1:

Input: 2
Output: 2
Explanation: 

The first beautiful arrangement is [1, 2]:

Number at the 1st position (i=1) is 1, and 1 is divisible by i (i=1).

Number at the 2nd position (i=2) is 2, and 2 is divisible by i (i=2).

The second beautiful arrangement is [2, 1]:

Number at the 1st position (i=1) is 2, and 2 is divisible by i (i=1).

Number at the 2nd position (i=2) is 1, and i (i=2) is divisible by 1.

Note:

    N is a positive integer and will not exceed 15.
