There are cells in the city. We must find the number of cells not occupied by a train track.

Observe that , so the number of rows we have to check is also

In each row, there can be multiple rail lines.

For each row sort the rail lines by their values.

Take a pointer that iterates through the column of each row and indicates the total distance we've covered so far. In the code below, this pointer is called .

Next, check every rail line of each row. If of the rail line is less than , that mean we have already taken this rail line into account and don't need to do anything with it.

Next, if is smaller than but is greater than , that means we haven't yet considered the portion of this rail and have to subtract it from the total number of cells.

Finally, if is greater than and so is , the whole rail line has not been considered yet and so we subtract from the total number of cells.

After each iteration, we have to update to the point we have covered thus far.

Solutions
Python

n, m, k = map(int, raw_input().split())
grid_points = 0
mapper = {}
for _ in range(k):
    r, c1, c2 = map(int, raw_input().split())
    if r in mapper:
        mapper[r].append((c1, c2))
    else:
        mapper[r] = [(c1, c2)]
for k in mapper:
    temp = mapper[k]
    temp.sort()
    begin = temp[0][0]
    end = temp[0][1]
    points = 0
    for i in range(1, len(temp)):
        if temp[i][0] > end:
            points += end - begin + 1
            begin = temp[i][0]
            end = temp[i][1]
        else:
            end = max(end, temp[i][1])
    points += end - begin + 1
    grid_points += points
print m*n - grid_points     

C++
